// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/crawler.proto

package crawler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CrawlerRequest struct {
	Root                 string   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlerRequest) Reset()         { *m = CrawlerRequest{} }
func (m *CrawlerRequest) String() string { return proto.CompactTextString(m) }
func (*CrawlerRequest) ProtoMessage()    {}
func (*CrawlerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f2bd06d2048150, []int{0}
}

func (m *CrawlerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlerRequest.Unmarshal(m, b)
}
func (m *CrawlerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlerRequest.Marshal(b, m, deterministic)
}
func (m *CrawlerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlerRequest.Merge(m, src)
}
func (m *CrawlerRequest) XXX_Size() int {
	return xxx_messageInfo_CrawlerRequest.Size(m)
}
func (m *CrawlerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlerRequest proto.InternalMessageInfo

func (m *CrawlerRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

type CrawlerReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlerReply) Reset()         { *m = CrawlerReply{} }
func (m *CrawlerReply) String() string { return proto.CompactTextString(m) }
func (*CrawlerReply) ProtoMessage()    {}
func (*CrawlerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f2bd06d2048150, []int{1}
}

func (m *CrawlerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlerReply.Unmarshal(m, b)
}
func (m *CrawlerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlerReply.Marshal(b, m, deterministic)
}
func (m *CrawlerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlerReply.Merge(m, src)
}
func (m *CrawlerReply) XXX_Size() int {
	return xxx_messageInfo_CrawlerReply.Size(m)
}
func (m *CrawlerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlerReply.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlerReply proto.InternalMessageInfo

func (m *CrawlerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CrawlerRequest)(nil), "crawler.CrawlerRequest")
	proto.RegisterType((*CrawlerReply)(nil), "crawler.CrawlerReply")
}

func init() {
	proto.RegisterFile("proto/crawler.proto", fileDescriptor_22f2bd06d2048150)
}

var fileDescriptor_22f2bd06d2048150 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x2e, 0x4a, 0x2c, 0xcf, 0x49, 0x2d, 0xd2, 0x03, 0xf3, 0x84, 0xd8, 0xa1, 0x5c,
	0x25, 0x15, 0x2e, 0x3e, 0x67, 0x08, 0x33, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x88,
	0x8b, 0xa5, 0x28, 0x3f, 0xbf, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x56, 0xd2,
	0xe0, 0xe2, 0x81, 0xab, 0x2a, 0xc8, 0xa9, 0x14, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e,
	0x4c, 0x4f, 0x85, 0x2a, 0x83, 0x71, 0x8d, 0x76, 0x31, 0x72, 0xb1, 0x43, 0x95, 0x0a, 0x59, 0x72,
	0xb1, 0x06, 0x97, 0x24, 0x16, 0x95, 0x08, 0x89, 0xeb, 0xc1, 0x6c, 0x47, 0xb5, 0x4b, 0x4a, 0x14,
	0x53, 0xa2, 0x20, 0xa7, 0x52, 0x89, 0x41, 0xc8, 0x82, 0x8b, 0x25, 0xb8, 0x24, 0xbf, 0x80, 0x0c,
	0x9d, 0x56, 0x5c, 0x2c, 0x3e, 0x99, 0xc5, 0x64, 0xd8, 0x69, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x1c,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x37, 0xe6, 0x37, 0x33, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrawlerClient interface {
	Start(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (*CrawlerReply, error)
	Stop(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (*CrawlerReply, error)
	List(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (Crawler_ListClient, error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Start(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (*CrawlerReply, error) {
	out := new(CrawlerReply)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) Stop(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (*CrawlerReply, error) {
	out := new(CrawlerReply)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) List(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (Crawler_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Crawler_serviceDesc.Streams[0], "/crawler.Crawler/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crawler_ListClient interface {
	Recv() (*CrawlerReply, error)
	grpc.ClientStream
}

type crawlerListClient struct {
	grpc.ClientStream
}

func (x *crawlerListClient) Recv() (*CrawlerReply, error) {
	m := new(CrawlerReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrawlerServer is the server API for Crawler service.
type CrawlerServer interface {
	Start(context.Context, *CrawlerRequest) (*CrawlerReply, error)
	Stop(context.Context, *CrawlerRequest) (*CrawlerReply, error)
	List(*CrawlerRequest, Crawler_ListServer) error
}

// UnimplementedCrawlerServer can be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (*UnimplementedCrawlerServer) Start(ctx context.Context, req *CrawlerRequest) (*CrawlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedCrawlerServer) Stop(ctx context.Context, req *CrawlerRequest) (*CrawlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedCrawlerServer) List(req *CrawlerRequest, srv Crawler_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Start(ctx, req.(*CrawlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Stop(ctx, req.(*CrawlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlerServer).List(m, &crawlerListServer{stream})
}

type Crawler_ListServer interface {
	Send(*CrawlerReply) error
	grpc.ServerStream
}

type crawlerListServer struct {
	grpc.ServerStream
}

func (x *crawlerListServer) Send(m *CrawlerReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Crawler_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Crawler_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Crawler_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/crawler.proto",
}
